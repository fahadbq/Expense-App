import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store/store";
import { api } from "../../app/services/api";

export const registerUser = createAsyncThunk(
  "authenticationSlice/registerUser",
  (data: object) => {
    return api.Authentication.registerUser(data);
  }
);

export const loginUser = createAsyncThunk(
  "authenticationSlice/loginUser",
  (data: object) => {
    return api.Authentication.loginUser(data);
  }
);

export const getUser = createAsyncThunk("authenticationSlice/getUser", () => {
  return api.Authentication.getUser();
});

export const updateUserProfile = createAsyncThunk(
  "authenticationSlice/updateUserProfile",
  async (data: object) => {
    return api.Authentication.updateUserProfile(data);
  }
);

export interface CounterState {
  registerError: string | undefined;
  loginError: string | undefined;
  userData: {
    _id?: string | undefined;
    email?: string | undefined;
    profile?: {
      name?: string | undefined;
      occupation?: string | undefined;
      phone?: string | undefined;
      picture?: string | undefined;
      // email?: string | undefined;
    };
  };

  updateUserProfileError: string | undefined;

  googleLoginError: string | undefined;
}

const initialState: CounterState = {
  registerError: "",

  loginError: "",

  userData: {},

  updateUserProfileError: "",

  googleLoginError: "",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const authenticationSlice = createSlice({
  name: "authenticationSlice",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.

  extraReducers: (builder) => {
    builder
      .addCase(registerUser.pending, (state) => {
        state.registerError = "";
      })
      .addCase(registerUser.fulfilled, (state, action) => {
        state.registerError = "";
      })
      .addCase(registerUser.rejected, (state, action) => {
        state.registerError = action.error.message;
      })

      .addCase(loginUser.pending, (state) => {
        state.loginError = "";
      })
      .addCase(loginUser.fulfilled, (state, action) => {
        state.loginError = "";
      })
      .addCase(loginUser.rejected, (state, action) => {
        console.log("action", action);
        state.loginError = action.error.message;
      })

      .addCase(getUser.pending, (state) => {
        state.userData = {};
      })
      .addCase(getUser.fulfilled, (state, action) => {
        state.userData = action.payload;
      })
      .addCase(getUser.rejected, (state, action) => {
        console.log("action", action);
        state.userData = {};
      })

      //Update user profile
      .addCase(updateUserProfile.pending, (state) => {
        state.updateUserProfileError = "";
      })
      .addCase(updateUserProfile.fulfilled, (state, action) => {
        console.log("action", action);
        state.updateUserProfileError = "";
      })
      .addCase(updateUserProfile.rejected, (state, action) => {
        state.updateUserProfileError = "";
      });
  },
});

// export const { increment, decrement, incrementByAmount } = userAuthSlice.actions;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state

export default authenticationSlice.reducer;
